#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "cart" 0x151f7c75 ""
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:6
    // cart = GlobalState<string>({ key: "cart", initialValue: "" });
    bytec_0 // "cart"
    bytec_2 // ""
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ShoppingCart extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x62e55ff0 0x67846dcc 0x64344e8d // method "addItem(string,string)string", method "getCart()string", method "clearCart()string"
    txna ApplicationArgs 0
    match main_addItem_route@5 main_getCart_route@6 main_clearCart_route@7

main_after_if_else@14:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ShoppingCart extends Contract {
    intc_1 // 0
    return

main_clearCart_route@7:
    // smart_contracts/hello_world/contract.algo.ts:20
    // clearCart(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub clearCart
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_getCart_route@6:
    // smart_contracts/hello_world/contract.algo.ts:15
    // getCart(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getCart
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_addItem_route@5:
    // smart_contracts/hello_world/contract.algo.ts:9
    // addItem(name: string, quantity: string): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ShoppingCart extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/hello_world/contract.algo.ts:9
    // addItem(name: string, quantity: string): string {
    callsub addItem
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@10:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class ShoppingCart extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::ShoppingCart.addItem(name: bytes, quantity: bytes) -> bytes:
addItem:
    // smart_contracts/hello_world/contract.algo.ts:9
    // addItem(name: string, quantity: string): string {
    proto 2 1
    // smart_contracts/hello_world/contract.algo.ts:6
    // cart = GlobalState<string>({ key: "cart", initialValue: "" });
    intc_1 // 0
    bytec_0 // "cart"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:10
    // this.cart.value = this.cart.value + " | " + name + " x" + quantity;
    pushbytes " | "
    concat
    frame_dig -2
    concat
    pushbytes " x"
    concat
    frame_dig -1
    concat
    // smart_contracts/hello_world/contract.algo.ts:6
    // cart = GlobalState<string>({ key: "cart", initialValue: "" });
    bytec_0 // "cart"
    // smart_contracts/hello_world/contract.algo.ts:10
    // this.cart.value = this.cart.value + " | " + name + " x" + quantity;
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:11
    // return name;
    frame_dig -2
    retsub


// smart_contracts/hello_world/contract.algo.ts::ShoppingCart.getCart() -> bytes:
getCart:
    // smart_contracts/hello_world/contract.algo.ts:6
    // cart = GlobalState<string>({ key: "cart", initialValue: "" });
    intc_1 // 0
    bytec_0 // "cart"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:16
    // return this.cart.value;
    retsub


// smart_contracts/hello_world/contract.algo.ts::ShoppingCart.clearCart() -> bytes:
clearCart:
    // smart_contracts/hello_world/contract.algo.ts:6
    // cart = GlobalState<string>({ key: "cart", initialValue: "" });
    bytec_0 // "cart"
    // smart_contracts/hello_world/contract.algo.ts:21
    // this.cart.value = "";
    bytec_2 // ""
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:22
    // return "Cart cleared!";
    pushbytes "Cart cleared!"
    retsub
